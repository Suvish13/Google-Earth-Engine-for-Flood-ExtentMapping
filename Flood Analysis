//Add your AOI and Define It
// Load Sentinel-1 C-band SAR Ground Range collection (log scale, VV, descending)
var collectionVV = ee.ImageCollection('COPERNICUS/S1_GRD')
.filter(ee.Filter.eq('instrumentMode', 'IW'))
.filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))
.filter(ee.Filter.eq('orbitProperties_pass', 'DESCENDING'))
.filterMetadata('resolution_meters', 'equals' , 10)
.filterBounds(ROI)
.select('VV');
print(collectionVV, 'Collection VV');
// Load Sentinel-1 C-band SAR Ground Range collection (log scale, VH, descending)
var collectionVH = ee.ImageCollection('COPERNICUS/S1_GRD')
.filter(ee.Filter.eq('instrumentMode', 'IW'))
.filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
.filter(ee.Filter.eq('orbitProperties_pass', 'DESCENDING'))
.filterMetadata('resolution_meters', 'equals' , 10)
.filterBounds(ROI)
.select('VH');
print(collectionVH, 'Collection VH');
//Filter by date
var beforeVV = collectionVV.filterDate('2023-11-01', '2023-12-15');
var afterVV = collectionVV.filterDate('2023-12-15', '2024-01-25');
var beforeVH = collectionVH.filterDate('2023-11-01', '2023-12-15');
var afterVH = collectionVH.filterDate('2023-12-15', '2024-01-25');
print(beforeVV, 'Before VV');
print(afterVV, 'After VV');
print(beforeVH, 'Before VH');
print(afterVH, 'After VH');
//Display each image from before and after search
function addImage(image) { 
// display each image in collection
var id = image.id;
var image = ee.Image(image.id);
Map.addLayer(image);
}
beforeVV.evaluate(function(beforeVV) { 
// use map on client-side
beforeVV.features.map(addImage)
})
//Filter by date
var beforeVV = collectionVV.filterDate('2023-11-01', '2023-12-15').mosaic();
var afterVV = collectionVV.filterDate('2023-12-15', '2024-01-25').mosaic();
var beforeVH = collectionVH.filterDate('2023-11-01', '2023-12-15').mosaic();
var afterVH = collectionVH.filterDate('2023-12-15', '2024-01-25').mosaic();
var before_clip = beforeVV.clip(ROI);
var after_clip = afterVV.clip(ROI);
var beforeVH = beforeVH.clip(ROI);
var afteVH = afterVH.clip(ROI);
// Display map
Map.centerObject(ROI, 7);
Map.addLayer(beforeVV, {min:-15,max:0}, 'Before flood VV', 0);
Map.addLayer(afterVV, {min:-15,max:0}, 'After flood VV', 0);
Map.addLayer(beforeVH, {min:-25,max:0}, 'Before flood VH', 0);
Map.addLayer(afterVH, {min:-25,max:0}, 'After flood VH', 0);
Map.addLayer(beforeVH.addBands(afterVH).addBands(beforeVH), {min: -25, max: -8},'BVH/AVV/AVH composite', 0);
//Apply filter to reduce speckle
var SMOOTHING_RADIUS = 50;
var beforeVV_filtered = beforeVV.focal_mean(SMOOTHING_RADIUS, 'circle', 'meters');
var beforeVH_filtered = beforeVH.focal_mean(SMOOTHING_RADIUS, 'circle', 'meters');
var afterVV_filtered = afterVV.focal_mean(SMOOTHING_RADIUS, 'circle', 'meters');
var afterVH_filtered = afterVH.focal_mean(SMOOTHING_RADIUS, 'circle', 'meters');
//Display filtered images
Map.addLayer(beforeVV_filtered, {min:-15,max:0}, 'Before Flood VV Filtered',0);
Map.addLayer(beforeVH_filtered, {min:-25,max:0}, 'Before Flood VH Filtered',0);
Map.addLayer(afterVV_filtered, {min:-15,max:0}, 'After Flood VV Filtered',0);
Map.addLayer(afterVH_filtered, {min:-25,max:0}, 'After Flood VH Filtered',0);
// Calculate difference between before and after
var differenceVH=
afterVH_filtered.divide(beforeVH_filtered);
Map.addLayer(differenceVH, {min: 0,max:2},
'difference VH filtered', 0);
//Apply Threshold
var DIFF_UPPER_THRESHOLD = 1.25;
var differenceVH_thresholded = differenceVH.gt(DIFF_UPPER_THRESHOLD);
Map.addLayer(differenceVH_thresholded.updateMask(differenceVH_thresholded),{palette:"0000FF"},'flooded areas - blue',1);
